#ifndef __OB_RESOLUTION_H__
#define __OB_RESOLUTION_H__
#include <stdint.h>

#if 1
typedef enum ob_resolution_t{
	RESOLUTION_UNKNOWN = -1, //0
	RESOLUTION_160_120 = 0, //0
	RESOLUTION_120_160,
	RESOLUTION_320_240, //2
	RESOLUTION_240_320,
	RESOLUTION_640_400, //4
	RESOLUTION_400_640,
	RESOLUTION_640_480, //6
	RESOLUTION_480_640,
	RESOLUTION_800_600, //8
	RESOLUTION_600_800,
	RESOLUTION_1280_800, //10
	RESOLUTION_800_1280,
	RESOLUTION_1280_960, //12
	RESOLUTION_960_1280,
	RESOLUTION_1280_1024, //14
	RESOLUTION_1024_1280,
	RESOLUTION_1280_1080, //16
	RESOLUTION_1080_1280,
	RESOLUTION_1328_1120, //18
	RESOLUTION_1120_1328,
	RESOLUTION_1600_1200,
	RESOLUTION_1200_1600 , // 21
	RESOLUTION_1280_720 ,
	RESOLUTION_720_1280 ,
	RESOLUTION_4032_3024,
	RESOLUTION_3024_4032
}ob_resolution_key;

typedef struct ob_videomode_t {
	int width;
	int height;
}ob_resolution_value;

typedef struct ob_resolution_keyvalue_t {
	ob_resolution_key key;
	ob_resolution_value  vmode;
}ob_resolution_map;

static ob_resolution_map ob_res_arr[] = {
	{ RESOLUTION_160_120 ,{160, 120}},
	{ RESOLUTION_120_160, {120, 160}},
	{ RESOLUTION_320_240, {320, 240}},
	{ RESOLUTION_240_320, {240, 320}},
	{ RESOLUTION_640_400, {640, 400}}, //4
	{ RESOLUTION_400_640, {400, 640}},
	{ RESOLUTION_640_480, {640, 480}},//6
	{ RESOLUTION_480_640, {480, 640}},
	{ RESOLUTION_800_600, {800, 600}},//8
	{ RESOLUTION_600_800, {600, 800}},
	{ RESOLUTION_1280_800,{1280,800}},//10
	{ RESOLUTION_800_1280,  {800,1280}},
	{ RESOLUTION_1280_960,  {1280,960}},//12
	{ RESOLUTION_960_1280,  {960,1280}},
	{ RESOLUTION_1280_1024, {1280,1024}},//14
	{ RESOLUTION_1024_1280, {1024,1280}},
	{ RESOLUTION_1280_1080, {1280,1080}},//16
	{ RESOLUTION_1080_1280, {1080,1280}},
	{ RESOLUTION_1328_1120, {1328, 1120}},//18
	{ RESOLUTION_1120_1328, {1120, 1328}},
	{ RESOLUTION_1600_1200, {1600, 1200}},
	{ RESOLUTION_1200_1600,{ 1200, 1600 } },  //21
	{ RESOLUTION_1280_720, { 1280, 720 } },
	{ RESOLUTION_720_1280, { 720, 1280 } },

	{ RESOLUTION_4032_3024,{ 4032, 3024 } },
	{ RESOLUTION_3024_4032,{ 3024, 4032 } },
};
#else
typedef struct resolutions
{
	uint8_t val;
	uint16_t width;
	uint16_t height;
} resolutions_s_t;

typedef enum OBResolutions_t {
	RESOLUTION_UNKNOWN = -1,
	RESOLUTION_160_120 = 0,  //160_120
	RESOLUTION_120_160 = 1,  //120_160
	RESOLUTION_320_240 = 2,  //320_240
	RESOLUTION_240_320 = 3,  //240_320
	RESOLUTION_640_400 = 4,  //640_400
	RESOLUTION_400_640 = 5,  //400_640
	RESOLUTION_640_480 = 6,  //640_480
	RESOLUTION_480_640 = 7,  //480_640
	RESOLUTION_800_600 = 8,  //800_600
	RESOLUTION_600_800 = 9,  //600_800
	RESOLUTION_1280_800 = 10,  //1280x800
	RESOLUTION_800_1280 = 11,  //800x1280
	RESOLUTION_1280_960 = 12,  //1280x960
	RESOLUTION_960_1280 = 13,  //960_1280
	RESOLUTION_1280_1024 = 14,  //1280x960
	RESOLUTION_1024_1280 = 15,  //1024_1280
	RESOLUTION_1280_1080 = 16,  //1280_1080
	RESOLUTION_1080_1280 = 17,  //1080_1280
	RESOLUTION_1328_1120 = 18,  //1328_1120
	RESOLUTION_1120_1328 = 19,  //1120_1328
	RESOLUTION_1600_1200 = 20,  //1600_1200
	RESOLUTION_1200_1600 = 21,  //1200_1600
} OBResolution;


static resolutions_s_t ob_res_arr[] = {
	{ RESOLUTION_160_120, 160, 120 },
	{ RESOLUTION_120_160, 120, 160 },
	{ RESOLUTION_320_240, 320, 240 },
	{ RESOLUTION_240_320, 240, 320 },
	{ RESOLUTION_640_400, 640, 400 },
	{ RESOLUTION_400_640, 400, 640 },
	{ RESOLUTION_640_480, 640, 480 },
	{ RESOLUTION_480_640, 480, 640 },
	{ RESOLUTION_800_600, 800, 600 },
	{ RESOLUTION_600_800, 600, 800 },
	{ RESOLUTION_1280_800, 1280, 800 },
	{ RESOLUTION_800_1280, 800, 1280 },
	{ RESOLUTION_1280_960, 1280, 960 },
	{ RESOLUTION_960_1280, 960, 1280 },
	{ RESOLUTION_1280_1024, 1280, 1024 },
	{ RESOLUTION_1024_1280, 1024, 1280 },
	{ RESOLUTION_1280_1080, 1280, 1080 },
	{ RESOLUTION_1080_1280, 1080, 1280 },
	{ RESOLUTION_1328_1120, 1328, 1120 },
	{ RESOLUTION_1120_1328, 1120, 1328 },
	{ RESOLUTION_1600_1200, 1600, 1200 },
	{ RESOLUTION_1200_1600, 1200, 1600 },
};
#endif
#endif